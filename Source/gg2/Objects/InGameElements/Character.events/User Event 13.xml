<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="23">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    keyState = read_ubyte(global.socketBuffer);
    aimDirection = read_ushort(global.socketBuffer)*360/65536;
    
    var temp, newIntel;
    if(global.updateType == QUICK_UPDATE) or (global.updateType == FULL_UPDATE) {
        x = read_ushort(global.socketBuffer)/5;
        y = read_ushort(global.socketBuffer)/5;
        hspeed = read_byte(global.socketBuffer)/5;
        vspeed = read_byte(global.socketBuffer)/5;
        xprevious = x;
        yprevious = y;
        
        hp = read_ubyte(global.socketBuffer);
        currentWeapon.ammoCount = read_ubyte(global.socketBuffer);
        
        temp = read_ubyte(global.socketBuffer);
        cloak = (temp &amp; $01 != 0);
        newIntel = (temp &amp; $02 != 0);
        moveStatus = (temp &gt;&gt; 2) &amp; $07;
        // Drop the intel if intel changes from true to false, destroy the intel when if changes from false to true
        // This is more of a workaround to keep 2.1.2 compatible with 2.1.1, it should be solved later by
        // fully syncing intel drop.
        if(newIntel and !intel) {
            if(team == TEAM_RED) {
                with(IntelligenceBlue) {
                    instance_destroy();
                }
            } else if(team == TEAM_BLUE) {
                with(IntelligenceRed) {
                    instance_destroy();
                }
            }
        } else if(!newIntel &amp;&amp; intel) {
            event_user(5);
        }
        intel = newIntel;
    }
    
if(global.updateType == FULL_UPDATE){
        animationOffset = read_ubyte(global.socketBuffer);
        //class specific syncs
        switch(player.class)
        {
        case CLASS_SPY:
            cloakAlpha = read_ubyte(global.socketBuffer)/255;
            break;
        case CLASS_MEDIC:
            currentWeapon.uberCharge = read_ubyte(global.socketBuffer)*2000/255;
            break;
        case CLASS_ENGINEER:
            nutsNBolts = read_ubyte(global.socketBuffer);
            break;
        case CLASS_SNIPER:
            currentWeapon.t = read_ubyte(global.socketBuffer);
            break;
        default:
            read_ubyte(global.socketBuffer)
        }
        alarm[1]=read_short(global.socketBuffer); 
        if alarm[1] != 0 canGrabIntel = false;
        with(currentWeapon) {
            event_user(13);
        }
    }
    event_user(1);
}


</argument>
      </arguments>
    </action>
  </actions>
</event>
