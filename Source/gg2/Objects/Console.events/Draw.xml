<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">x = view_xview[0];
y = view_yview[0]+(view_hview[0]/2)-sprite_height+230;

if global.typing
{
    draw_sprite_ext(ConsoleBackgroundS, 0, x, y, image_xscale, image_yscale/2, image_angle, c_white, 1)
    draw_sprite(sprite_index,0,x,y);
}
else
{
    if mode == "chat"
    {
        draw_sprite_ext(ConsoleBackgroundS, 0, x, y, image_xscale, image_yscale/2, image_angle, c_white, 0.3)
        draw_sprite_ext(sprite_index,0,x,y, image_xscale, image_yscale, image_angle, c_white, 0.3);
        
        draw_set_alpha(0.4)
    }
}

draw_set_color(make_color_rgb(0, 255, 255));// This is the light-blue of the console.

draw_set_color(c_white);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_alpha(1);

var visible_string_width;
visible_string = string_copy(text,0,seek);
visible_string_width = string_width(visible_string);

/*if (visible_string_width&gt;sprite_width){
    draw_set_halign(fa_right);
    //draw_text(x+sprite_width-(string_width("_")*0.7),y,text);
    draw_text(x+sprite_width-1,y,visible_string);
    draw_set_halign(fa_left);
}else{*/
draw_text(x,y,text);
//}

if (draw_cursor) {
    var cx, cy, temp;
    temp = text + " ";
    /*if (visible_string_width&gt;sprite_width){
        //cx = x+sprite_width-(string_width("_")*0.7);
        cx = x+sprite_width;
    }else{*/
    cx = x+visible_string_width;
    //}
    cy = y+string_height(text+" ")-string_height("_");
    draw_line(cx,cy,cx,cy+string_height("_"));
    //draw_text_transformed(cx,cy,"_",string_width(temp[seek])/string_width("_"),1,0);
}

var listlen, listheight;
listlen = ds_list_size(global.ConsoleLog);
listheight = string_height("_")*listlen;
var i;
draw_set_color(make_color_rgb(0, 255, 255));

if global.typing == 0 and mode == "console"
{
    draw_set_alpha(0)
}

for(i=0; i&lt;listlen; i+=1)
{
    textLine = ds_list_find_value(global.ConsoleLog, i)

    x_offset = 0
    
    if string_count("/:/", textLine) &lt;= 0
    {
        draw_text(x, y-listheight+string_height("_")*i, textLine)
        continue;
    }
    
    while string_count("/:/", textLine) &gt; 0
    {    
        index = string_pos("/:/", textLine)

        colorCode = string_copy(textLine, index+3, 1)

        if colorCode == "r"
        {
            draw_set_color(c_red)
        }
        else if colorCode == "b"
        {
            draw_set_color(make_color_rgb(0, 129, 255))
        }
        else if colorCode == "g"
        {
            draw_set_color(c_green)
        }
        else if colorCode == "y"
        {
            draw_set_color(make_color_rgb(224, 181, 35))// Gold
        }
        else if colorCode == "l"
        {
            draw_set_color(make_color_rgb(0, 255, 255))// Light Blue
        }
        else if colorCode == "w"
        {
            draw_set_color(c_white)
        }
        else if colorCode == "v"
        {
            draw_set_color(make_color_rgb(255, 0, 255))
        }
        else
        {
            show_message("Error using the color codes.#Letter that caused error "+string(colorCode))
        }

        if string_count("/:/", textLine) &gt; 1// There is another color code later
        {
            secondIndex = string_pos("/:/", string_copy(textLine, index+4, string_length(textLine)-index-4))
        }
        else
        {
            secondIndex = string_length(textLine)+1// If there isn't another code, just go until the end of the line.
        }
        
        draw_text(x+x_offset, y-listheight+string_height("_")*i, string_copy(textLine, index+4, secondIndex-index))
        
        x_offset += string_width(string_copy(textLine, index+4, secondIndex-index))
        
        textLine = string_copy(textLine, secondIndex, string_length(textLine)-secondIndex+1)
    }
}


//draw_text(x+x_offset, y-listheight+string_height("_")*i, string_copy(textLine, index+4, string_length(textLine)-index-4))
</argument>
      </arguments>
    </action>
    <action id="0" library="0">
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>false</canApplyTo>
      <actionType>NONE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="EXPRESSION"/>
        <argument kind="EXPRESSION"/>
        <argument kind="EXPRESSION"/>
        <argument kind="EXPRESSION"/>
        <argument kind="EXPRESSION"/>
        <argument kind="EXPRESSION"/>
        <argument kind="EXPRESSION"/>
        <argument kind="EXPRESSION"/>
      </arguments>
    </action>
  </actions>
</event>
